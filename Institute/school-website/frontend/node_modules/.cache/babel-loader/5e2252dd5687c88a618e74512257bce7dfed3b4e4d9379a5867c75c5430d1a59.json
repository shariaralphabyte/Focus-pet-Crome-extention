{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Async thunks\nexport const fetchNotices = createAsyncThunk('notices/fetchNotices', async (params = {}, {\n  rejectWithValue\n}) => {\n  try {\n    const queryParams = new URLSearchParams(params).toString();\n    const response = await api.get(`/notices?${queryParams}`);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch notices');\n  }\n});\nexport const fetchNoticeById = createAsyncThunk('notices/fetchNoticeById', async ({\n  id,\n  language = 'en'\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.get(`/notices/${id}?language=${language}`);\n    console.log('API Response:', response.data); // Debug log\n    // Ensure we return the notice data in the expected format\n    return response.data.data || response.data; // Handle both response formats\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('Error fetching notice:', error);\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch notice. The notice may not exist or you may have insufficient permissions.');\n  }\n});\nexport const createNotice = createAsyncThunk('notices/createNotice', async (noticeData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.post('/notices', noticeData);\n    return response.data.notice;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create notice');\n  }\n});\nexport const updateNotice = createAsyncThunk('notices/updateNotice', async ({\n  id,\n  noticeData\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.put(`/notices/${id}`, noticeData);\n    return response.data.notice;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    return rejectWithValue(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update notice');\n  }\n});\nexport const deleteNotice = createAsyncThunk('notices/deleteNotice', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    await api.delete(`/notices/${id}`);\n    return id;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    return rejectWithValue(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete notice');\n  }\n});\nexport const likeNotice = createAsyncThunk('notices/likeNotice', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.post(`/notices/${id}/like`);\n    return {\n      id,\n      ...response.data\n    };\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    return rejectWithValue(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to like notice');\n  }\n});\nexport const addComment = createAsyncThunk('notices/addComment', async ({\n  id,\n  content\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.post(`/notices/${id}/comments`, {\n      content\n    });\n    return {\n      id,\n      comment: response.data\n    };\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    return rejectWithValue(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to add comment');\n  }\n});\nconst initialState = {\n  notices: [],\n  currentNotice: null,\n  loading: false,\n  error: null,\n  pagination: {\n    currentPage: 1,\n    totalPages: 1,\n    total: 0,\n    limit: 10\n  },\n  filters: {\n    category: '',\n    search: '',\n    targetAudience: '',\n    language: 'en'\n  },\n  categories: ['General', 'Academic', 'Examination', 'Admission', 'Holiday', 'Event', 'Sports', 'Cultural', 'Emergency', 'Fee', 'Result', 'Meeting', 'Training', 'Workshop']\n};\nconst noticeSlice = createSlice({\n  name: 'notices',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    setFilters: (state, action) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload\n      };\n    },\n    clearFilters: state => {\n      state.filters = {\n        category: '',\n        search: '',\n        targetAudience: '',\n        language: state.filters.language\n      };\n    },\n    setCurrentPage: (state, action) => {\n      state.pagination.currentPage = action.payload;\n    },\n    clearCurrentNotice: state => {\n      state.currentNotice = null;\n    },\n    updateNoticeInList: (state, action) => {\n      const index = state.notices.findIndex(notice => notice._id === action.payload._id);\n      if (index !== -1) {\n        state.notices[index] = action.payload;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch notices\n    .addCase(fetchNotices.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchNotices.fulfilled, (state, action) => {\n      state.loading = false;\n      state.notices = action.payload.data || [];\n      state.pagination = {\n        currentPage: action.payload.page || 1,\n        totalPages: action.payload.pages || 1,\n        total: action.payload.total || 0,\n        limit: state.pagination.limit\n      };\n      state.error = null;\n    }).addCase(fetchNotices.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Fetch notice by ID\n    .addCase(fetchNoticeById.pending, state => {\n      state.loading = true;\n      state.error = null;\n      state.currentNotice = null; // Clear current notice when starting a new fetch\n    }).addCase(fetchNoticeById.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentNotice = action.payload;\n      state.error = null;\n    }).addCase(fetchNoticeById.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload || 'Failed to load notice';\n      state.currentNotice = null; // Clear current notice on error\n      console.error('Error in fetchNoticeById:', action.payload); // Debug log\n    })\n\n    // Create notice\n    .addCase(createNotice.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(createNotice.fulfilled, (state, action) => {\n      state.loading = false;\n      state.notices.unshift(action.payload);\n      state.error = null;\n    }).addCase(createNotice.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Update notice\n    .addCase(updateNotice.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(updateNotice.fulfilled, (state, action) => {\n      state.loading = false;\n      const index = state.notices.findIndex(notice => notice._id === action.payload._id);\n      if (index !== -1) {\n        state.notices[index] = action.payload;\n      }\n      if (state.currentNotice && state.currentNotice._id === action.payload._id) {\n        state.currentNotice = action.payload;\n      }\n      state.error = null;\n    }).addCase(updateNotice.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Delete notice\n    .addCase(deleteNotice.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(deleteNotice.fulfilled, (state, action) => {\n      state.loading = false;\n      state.notices = state.notices.filter(notice => notice._id !== action.payload);\n      if (state.currentNotice && state.currentNotice._id === action.payload) {\n        state.currentNotice = null;\n      }\n      state.error = null;\n    }).addCase(deleteNotice.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Like notice\n    .addCase(likeNotice.fulfilled, (state, action) => {\n      const {\n        id,\n        isLiked,\n        likeCount\n      } = action.payload;\n      const notice = state.notices.find(n => n._id === id);\n      if (notice) {\n        notice.isLiked = isLiked;\n        notice.likeCount = likeCount;\n      }\n      if (state.currentNotice && state.currentNotice._id === id) {\n        state.currentNotice.isLiked = isLiked;\n        state.currentNotice.likeCount = likeCount;\n      }\n    })\n\n    // Add comment\n    .addCase(addComment.fulfilled, (state, action) => {\n      // Comment added successfully (pending approval)\n      // No need to update state as comments need approval\n    });\n  }\n});\nexport const {\n  clearError,\n  setFilters,\n  clearFilters,\n  setCurrentPage,\n  clearCurrentNotice,\n  updateNoticeInList\n} = noticeSlice.actions;\n\n// Selectors\nexport const selectNotices = state => state.notices.notices;\nexport const selectCurrentNotice = state => state.notices.currentNotice;\nexport const selectNoticesLoading = state => state.notices.loading;\nexport const selectNoticesError = state => state.notices.error;\nexport const selectNoticesPagination = state => state.notices.pagination;\nexport const selectNoticesFilters = state => state.notices.filters;\nexport const selectNoticeCategories = state => state.notices.categories;\nexport default noticeSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","fetchNotices","params","rejectWithValue","queryParams","URLSearchParams","toString","response","get","data","error","_error$response","_error$response$data","message","fetchNoticeById","id","language","console","log","_error$response2","_error$response2$data","createNotice","noticeData","post","notice","_error$response3","_error$response3$data","updateNotice","put","_error$response4","_error$response4$data","deleteNotice","delete","_error$response5","_error$response5$data","likeNotice","_error$response6","_error$response6$data","addComment","content","comment","_error$response7","_error$response7$data","initialState","notices","currentNotice","loading","pagination","currentPage","totalPages","total","limit","filters","category","search","targetAudience","categories","noticeSlice","name","reducers","clearError","state","setFilters","action","payload","clearFilters","setCurrentPage","clearCurrentNotice","updateNoticeInList","index","findIndex","_id","extraReducers","builder","addCase","pending","fulfilled","page","pages","rejected","unshift","filter","isLiked","likeCount","find","n","actions","selectNotices","selectCurrentNotice","selectNoticesLoading","selectNoticesError","selectNoticesPagination","selectNoticesFilters","selectNoticeCategories","reducer"],"sources":["/Users/360infotech/Desktop/Practice/Institute/school-website/frontend/src/store/slices/noticeSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Async thunks\nexport const fetchNotices = createAsyncThunk(\n  'notices/fetchNotices',\n  async (params = {}, { rejectWithValue }) => {\n    try {\n      const queryParams = new URLSearchParams(params).toString();\n      const response = await api.get(`/notices?${queryParams}`);\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(\n        error.response?.data?.message || 'Failed to fetch notices'\n      );\n    }\n  }\n);\n\nexport const fetchNoticeById = createAsyncThunk(\n  'notices/fetchNoticeById',\n  async ({ id, language = 'en' }, { rejectWithValue }) => {\n    try {\n      const response = await api.get(`/notices/${id}?language=${language}`);\n      console.log('API Response:', response.data); // Debug log\n      // Ensure we return the notice data in the expected format\n      return response.data.data || response.data; // Handle both response formats\n    } catch (error) {\n      console.error('Error fetching notice:', error);\n      return rejectWithValue(\n        error.response?.data?.message || 'Failed to fetch notice. The notice may not exist or you may have insufficient permissions.'\n      );\n    }\n  }\n);\n\nexport const createNotice = createAsyncThunk(\n  'notices/createNotice',\n  async (noticeData, { rejectWithValue }) => {\n    try {\n      const response = await api.post('/notices', noticeData);\n      return response.data.notice;\n    } catch (error) {\n      return rejectWithValue(\n        error.response?.data?.message || 'Failed to create notice'\n      );\n    }\n  }\n);\n\nexport const updateNotice = createAsyncThunk(\n  'notices/updateNotice',\n  async ({ id, noticeData }, { rejectWithValue }) => {\n    try {\n      const response = await api.put(`/notices/${id}`, noticeData);\n      return response.data.notice;\n    } catch (error) {\n      return rejectWithValue(\n        error.response?.data?.message || 'Failed to update notice'\n      );\n    }\n  }\n);\n\nexport const deleteNotice = createAsyncThunk(\n  'notices/deleteNotice',\n  async (id, { rejectWithValue }) => {\n    try {\n      await api.delete(`/notices/${id}`);\n      return id;\n    } catch (error) {\n      return rejectWithValue(\n        error.response?.data?.message || 'Failed to delete notice'\n      );\n    }\n  }\n);\n\nexport const likeNotice = createAsyncThunk(\n  'notices/likeNotice',\n  async (id, { rejectWithValue }) => {\n    try {\n      const response = await api.post(`/notices/${id}/like`);\n      return { id, ...response.data };\n    } catch (error) {\n      return rejectWithValue(\n        error.response?.data?.message || 'Failed to like notice'\n      );\n    }\n  }\n);\n\nexport const addComment = createAsyncThunk(\n  'notices/addComment',\n  async ({ id, content }, { rejectWithValue }) => {\n    try {\n      const response = await api.post(`/notices/${id}/comments`, { content });\n      return { id, comment: response.data };\n    } catch (error) {\n      return rejectWithValue(\n        error.response?.data?.message || 'Failed to add comment'\n      );\n    }\n  }\n);\n\nconst initialState = {\n  notices: [],\n  currentNotice: null,\n  loading: false,\n  error: null,\n  pagination: {\n    currentPage: 1,\n    totalPages: 1,\n    total: 0,\n    limit: 10,\n  },\n  filters: {\n    category: '',\n    search: '',\n    targetAudience: '',\n    language: 'en',\n  },\n  categories: [\n    'General', 'Academic', 'Examination', 'Admission', 'Holiday',\n    'Event', 'Sports', 'Cultural', 'Emergency', 'Fee', 'Result',\n    'Meeting', 'Training', 'Workshop'\n  ],\n};\n\nconst noticeSlice = createSlice({\n  name: 'notices',\n  initialState,\n  reducers: {\n    clearError: (state) => {\n      state.error = null;\n    },\n    setFilters: (state, action) => {\n      state.filters = { ...state.filters, ...action.payload };\n    },\n    clearFilters: (state) => {\n      state.filters = {\n        category: '',\n        search: '',\n        targetAudience: '',\n        language: state.filters.language,\n      };\n    },\n    setCurrentPage: (state, action) => {\n      state.pagination.currentPage = action.payload;\n    },\n    clearCurrentNotice: (state) => {\n      state.currentNotice = null;\n    },\n    updateNoticeInList: (state, action) => {\n      const index = state.notices.findIndex(notice => notice._id === action.payload._id);\n      if (index !== -1) {\n        state.notices[index] = action.payload;\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Fetch notices\n      .addCase(fetchNotices.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchNotices.fulfilled, (state, action) => {\n        state.loading = false;\n        state.notices = action.payload.data || [];\n        state.pagination = {\n          currentPage: action.payload.page || 1,\n          totalPages: action.payload.pages || 1,\n          total: action.payload.total || 0,\n          limit: state.pagination.limit,\n        };\n        state.error = null;\n      })\n      .addCase(fetchNotices.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // Fetch notice by ID\n      .addCase(fetchNoticeById.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n        state.currentNotice = null; // Clear current notice when starting a new fetch\n      })\n      .addCase(fetchNoticeById.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentNotice = action.payload;\n        state.error = null;\n      })\n      .addCase(fetchNoticeById.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload || 'Failed to load notice';\n        state.currentNotice = null; // Clear current notice on error\n        console.error('Error in fetchNoticeById:', action.payload); // Debug log\n      })\n      \n      // Create notice\n      .addCase(createNotice.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createNotice.fulfilled, (state, action) => {\n        state.loading = false;\n        state.notices.unshift(action.payload);\n        state.error = null;\n      })\n      .addCase(createNotice.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // Update notice\n      .addCase(updateNotice.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(updateNotice.fulfilled, (state, action) => {\n        state.loading = false;\n        const index = state.notices.findIndex(notice => notice._id === action.payload._id);\n        if (index !== -1) {\n          state.notices[index] = action.payload;\n        }\n        if (state.currentNotice && state.currentNotice._id === action.payload._id) {\n          state.currentNotice = action.payload;\n        }\n        state.error = null;\n      })\n      .addCase(updateNotice.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // Delete notice\n      .addCase(deleteNotice.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(deleteNotice.fulfilled, (state, action) => {\n        state.loading = false;\n        state.notices = state.notices.filter(notice => notice._id !== action.payload);\n        if (state.currentNotice && state.currentNotice._id === action.payload) {\n          state.currentNotice = null;\n        }\n        state.error = null;\n      })\n      .addCase(deleteNotice.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // Like notice\n      .addCase(likeNotice.fulfilled, (state, action) => {\n        const { id, isLiked, likeCount } = action.payload;\n        const notice = state.notices.find(n => n._id === id);\n        if (notice) {\n          notice.isLiked = isLiked;\n          notice.likeCount = likeCount;\n        }\n        if (state.currentNotice && state.currentNotice._id === id) {\n          state.currentNotice.isLiked = isLiked;\n          state.currentNotice.likeCount = likeCount;\n        }\n      })\n      \n      // Add comment\n      .addCase(addComment.fulfilled, (state, action) => {\n        // Comment added successfully (pending approval)\n        // No need to update state as comments need approval\n      });\n  },\n});\n\nexport const {\n  clearError,\n  setFilters,\n  clearFilters,\n  setCurrentPage,\n  clearCurrentNotice,\n  updateNoticeInList,\n} = noticeSlice.actions;\n\n// Selectors\nexport const selectNotices = (state) => state.notices.notices;\nexport const selectCurrentNotice = (state) => state.notices.currentNotice;\nexport const selectNoticesLoading = (state) => state.notices.loading;\nexport const selectNoticesError = (state) => state.notices.error;\nexport const selectNoticesPagination = (state) => state.notices.pagination;\nexport const selectNoticesFilters = (state) => state.notices.filters;\nexport const selectNoticeCategories = (state) => state.notices.categories;\n\nexport default noticeSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}